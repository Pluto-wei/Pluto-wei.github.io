<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pluto-wei</title>
  
  <subtitle>Hello,nice to meet you!</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://pluto-wei.github.io/"/>
  <updated>2020-02-02T05:29:45.662Z</updated>
  <id>http://pluto-wei.github.io/</id>
  
  <author>
    <name>Pluto-wei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Crash Course Computer Science（part 3）</title>
    <link href="http://pluto-wei.github.io/2020/02/02/Crash%20Course%20Computer%20science%203/"/>
    <id>http://pluto-wei.github.io/2020/02/02/Crash%20Course%20Computer%20science%203/</id>
    <published>2020-02-02T05:19:55.000Z</published>
    <updated>2020-02-02T05:29:45.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机的现状和未来"><a class="markdownIt-Anchor" href="#计算机的现状和未来"></a> 计算机的现状和未来</h1><p><em><a id="more"></a></em></p><h2 id="机器学习人工智能"><a class="markdownIt-Anchor" href="#机器学习人工智能"></a> 机器学习＆人工智能</h2><h2 id="计算机视觉"><a class="markdownIt-Anchor" href="#计算机视觉"></a> 计算机视觉</h2><h2 id="自然语言处理"><a class="markdownIt-Anchor" href="#自然语言处理"></a> 自然语言处理</h2><h2 id="机器人"><a class="markdownIt-Anchor" href="#机器人"></a> 机器人</h2><h2 id="计算机心理学"><a class="markdownIt-Anchor" href="#计算机心理学"></a> 计算机心理学</h2><h2 id="教育科技"><a class="markdownIt-Anchor" href="#教育科技"></a> 教育科技</h2><h2 id="奇点天网未来"><a class="markdownIt-Anchor" href="#奇点天网未来"></a> 奇点，天网，未来</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计算机的现状和未来&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机的现状和未来&quot;&gt;&lt;/a&gt; 计算机的现状和未来&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机科学" scheme="http://Pluto-wei.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Crash Course Computer Science（part 2）</title>
    <link href="http://pluto-wei.github.io/2020/02/02/Crash%20Course%20Computer%20science%202/"/>
    <id>http://pluto-wei.github.io/2020/02/02/Crash%20Course%20Computer%20science%202/</id>
    <published>2020-02-02T05:17:44.000Z</published>
    <updated>2020-02-02T05:47:36.549Z</updated>
    
    <content type="html"><![CDATA[<p><strong>人机交互</strong><br><strong>计算机网络</strong></p><p><em><a id="more"></a></em></p><h1 id="人机交互"><a class="markdownIt-Anchor" href="#人机交互"></a> 人机交互</h1><h2 id="命令行"><a class="markdownIt-Anchor" href="#命令行"></a> 命令行</h2><ul><li><p>历史</p><p><strong>机械输入</strong>，齿轮 旋钮 开关 等机械结构 ，一大堆机械面板和线，<br>–&gt;<strong>打孔纸卡和磁带</strong>，输入依然是打印纸ang实时指示灯<br>–&gt;<strong>键盘 打字机</strong><br>–&gt;电传打字机：可用电话线发送和接收文本（蒸汽朋克版聊天室）<br>–&gt;<strong>电传</strong>交互（来回对话）–命令行界面 cmd<br>–&gt;<strong>屏幕</strong>代替电传打字机：虚拟电传打印机/玻璃电传打印机 --叫做终端 terminal<br>–&gt; 文字游戏，互动式小说–&gt; MUD 多人地牢游戏（MMORPG的前辈–大型多人在线角色扮演）</p></li></ul><h2 id="命令行指令"><a class="markdownIt-Anchor" href="#命令行指令"></a> 命令行指令</h2><p>ls (list) 列出当前目录里的所有文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-025053e99b6ad400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>cat (concatenate 连接)（unix）显示文件内容</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-18f8e9994a107312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>finger  找朋友</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-78dea6ed56276912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="屏幕-and-2d图形显示"><a class="markdownIt-Anchor" href="#屏幕-and-2d图形显示"></a> 屏幕 and 2D图形显示</h2><ul><li><p>早期屏幕的用途：跟踪程序的运行情况，结果打印在纸上，或是保存更永久的地方<br>（屏幕更新快，对临时值简直完美）</p></li><li><p>阴极射线管CRT：把电子发射到有磷光体图层的屏幕上，路径由磁场控制<br>1.矢量扫描，用电子束描述出形状<br>2.光栅扫描，一行行，从上自下，从左往右，只在特定地方打开电子束</p></li><li><p>早期不存像素（占用内存过多），存符号<br>字符生成器–第一代显卡<br>只读存储器 ROM，存每个字符的图形（点阵图案）<br>访问内存中的屏幕缓冲区（专为图形保留）<br><img src="https://upload-images.jianshu.io/upload_images/20644861-d8ba76044a699ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>用字符模仿图形界面：_ + 画盒子和线<br>字符集：<br><img src="https://upload-images.jianshu.io/upload_images/20644861-ccaa11179970cbdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>用额外的bit定义字体颜色和背景颜色</p></li><li><p>用CRT上的矢量模式，所有的东西都用线组成 （海龟作图）–&gt;动画</p></li><li><p><strong>位图显示</strong>–内存中的位对应屏幕上的像素</p></li><li><p>Sketchpad （几何画板）一个<strong>交互式</strong>图形界面–计算机辅助设计 CAD<br>输入设备–光笔</p></li></ul><h2 id="图形界面"><a class="markdownIt-Anchor" href="#图形界面"></a> 图形界面</h2><ul><li>直接显示了你可以做什么，直接在屏幕上找选项即可，"选择并点击界面”<br>图形用户界面–GUI</li><li>鼠标–用户和屏幕上的信息互动（光标）</li><li>桌面–模拟实际桌面，有窗口，时钟等小组件</li><li>用户触发事件–如点击按钮，选一个菜单项，滚动窗口–有对应的执行函数</li></ul><h2 id="3d图形"><a class="markdownIt-Anchor" href="#3d图形"></a> 3D图形</h2><p>有图型算法负责把3D坐标拍平显示到2D屏幕上–3D投影</p><ul><li>线框渲染：正交投影，透视投影</li><li><strong>扫描线渲染</strong>（填充图形）：<strong>抗锯齿</strong><br><img src="https://upload-images.jianshu.io/upload_images/20644861-b1118218da0afb51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="抗锯齿.png"></li><li>遮挡：排序算法，画家算法–由远到近</li><li>深度缓冲</li><li><strong>明暗处理</strong>：平面着色–最基本的照明算法，高洛德着色，冯氏着色<br><img src="https://upload-images.jianshu.io/upload_images/20644861-bab45421c4564a82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="明暗处理.png"></li><li><strong>纹理</strong>：纹理映射</li><li>加速渲染：<br>并行渲染</li><li>GPU–图形处理单元（在显卡上，周围有专用的RAM）</li></ul><h1 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h1><h2 id="开放式系统互联通信参考模型-osi"><a class="markdownIt-Anchor" href="#开放式系统互联通信参考模型-osi"></a> 👉开放式系统互联通信参考模型 OSI</h2><p><strong>物理层</strong>：线路里的电信号，无线网络里的无线信号<br><strong>数据链路层</strong>：负责管理物理层<br>有媒体访问控制地址MAC，冲突检测，指数退避和其他的一些底层协议<br><strong>网络层</strong>：负责各种报文交换和路由 IP<br><strong>传输层</strong>：UDP TCP这些协议，负责在计算机之间进行点到点的传输，检修和修复错误<br><strong>会话层</strong>：使用UDO TCP创建连接，传递信息，然后关掉连接<br><strong>表示层和应用程序层</strong>：浏览器，HTML解码，在线看电影</p><p>详情：&lt;<a href="https://baike.baidu.com/item/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">https://baike.baidu.com/item/OSI%E6%A8%A1%E5%9E%8B</a>&gt;</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-a0ab560094b00893.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OSI.png" title="">                </div>                <div class="image-caption">OSI.png</div>            </figure><h2 id="互联网"><a class="markdownIt-Anchor" href="#互联网"></a> 互联网</h2><ul><li><p>早期</p><p>需要分享数据和资源–&gt;公司或研究室内部使用<br>球鞋网络，共享物理资源–大家共享一台联网的打印机<br>早期网络也共享存储空间，不是每台电脑都有存储器</p></li><li><p>局域网</p><p>计算机近距离构成的小型网络LAN<br>最著名最成功的：<strong>以太网</strong></p></li><li><p>载波侦听多路访问 CSMA（属于链路层②）<br><img src="https://upload-images.jianshu.io/upload_images/20644861-0a58f3fc52194c57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CSMA.png"></p><p><strong>使用共享载体</strong><br>以一台以太电线连接所有计算机，以电信号的形式将数据传入电缆<br>每台机器需要有唯一的媒体访问控制地址（MAC地址）<br>数据的接受方的地址放在数据的头部，作为数据的前缀发送到网络中<br>计算机看到自己的MAC才处理数据<br>这种 <strong>多台电脑共享一个传输媒介</strong> 的方法 叫–CSMA <strong>载波侦听多路访问</strong><br>含义：载体，运输数据的共享媒体，以太网的载体是铜线，wifi的载体是传播无线电波的空气。很多计算机同时侦听载体，侦听，多路。<br>带宽：载体传播数据的速度</p></li><li><p>冲突（属于<strong>链路层②</strong>）</p><p>多个计算机想同时传入数据时就会冲突。<br>如果冲突，会等一小段随机时间，指数退避–指数级增长等待时间（以太网）<br>载体和其中的设备–冲突域<br>可以用交换机把其分成两个冲突域，交换机位于两个更小的网络之间，必要时才在两个网络间传数据（属于链路层）</p><p><img src="https://upload-images.jianshu.io/upload_images/20644861-fa77e1182cbfd9dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络.png"></p><p>大的计算机网络也是如此，包括最大的网络–互联网，也是多个连在一起的小一点的网络，是不同网络之间可以传递信息</p></li><li><p>路由（属于<strong>网络层③</strong>）</p><p>路由—通过互联的网络把信息从源地址传输到目的地址的活动<br>专用的通信线路（电路交换，电话占线）—&gt;报文交换（如同邮件系统，有几个站点）（分布式网络）<br>报文交换的好处：可以用不同路由使通信更可靠更能容错</p><p>消息沿路由跳转的次数，跳数限制–解决路由问题</p></li><li><p>协议（属于<strong>传输层④</strong>）</p><p>报文交换的缺点是某个文件太大堵塞网络<br>解决方法：把大报文分成很多小块–<strong>数据包</strong>–分组交换</p><p>报文具体格式由互联网协议定义–IP（网络层？）</p></li></ul><p><code>**IP是一个非常底层的协议 Internet Protocol**</code><br>IP之上还有其他协议：用户数据报协议 UDP<br>IP负责把数据包送到正确的电脑IP header</p><p><code>**UDP负责把数据包送到正确的程序 （UDP中的端口port）**</code><br>UDP头部还有校验和–checksum，但不提供数据修复和数据重发，并无法得知数据包是否到达（应用于直播，视频通话，对时间要求很高：射击游戏，“丢包”）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-9c6ca36ff8ff0e02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UDP.png" title="">                </div>                <div class="image-caption">UDP.png</div>            </figure><p><code>**传输控制协议 TCP（所有数据必须到达）：**</code><br>TCP头部也有端口号和校验和</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-8de54ef4d7929c37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP IP.png" title="">                </div>                <div class="image-caption">TCP IP.png</div>            </figure><p>👇 这个组合被称为TCP/IP</p><ul><li>TCP数据包有序号，使得接收方可以把数据包正确排序</li><li>接收方校验无误后会给发送方发送一个确认码ACK</li><li>能删掉重复数据包</li><li>可以同时发多个数据包，接收多个确认码</li><li>可以调整同时发包数量，解决拥堵问题（确认码的成功率和来回时间可以推断网络的拥堵程度）</li><li>缺点：确认码数据包把数量翻了一倍但并没有传播更多的信息</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-ac678397b2bd5a03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP.png" title="">                </div>                <div class="image-caption">TCP.png</div>            </figure><hr><ul><li><p>每台联网的计算机都需要一个IP地址，以点分隔的四组数据172.217.7.238</p></li><li><p>阻塞控制–路由器会平衡与其他路由器之间的负载，以确保传输可以快速可靠</p></li><li><p>当计算机访问一个网站时，需要两个东西：IP地址，端口号<br>互联网负责把域名和IP地址一一对应，就像电话簿–<strong><code>域名系统 DNS</code></strong></p><p>DNS服务器由互联网供应商ISP提供</p></li></ul><hr><p><a href="http://xn--youtube-ri9ko68a3zbl11jdo3d4zpukhkm45l.com" target="_blank" rel="noopener">👉在浏览器里输入youtube.com</a>，浏览器就去问DNS服务器，得到他的IP地址（如果存在），然后浏览器会给这个IP地址发TCP请求**（会话层④）**</p><ul><li>为了更好的管理上亿个域名，DNS存成树状结构（有3千万个二级域名）</li><li>顶级域名，二级域名，子域名</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-ddfb9f76a8f76fdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DNS.png" title="">                </div>                <div class="image-caption">DNS.png</div>            </figure><p>这些数据散布在很多DNS服务器上</p><p>WIFI 路由器连接的所有设备组成了局域网LAN，局域网再连接到广域网WAN，广域网的路由器属于你的互联网提供商ISP<br>广域网先连接到一个区域性路由器（覆盖一个街区），然后连接到一个更大的WAN（覆盖整个城市），最终到达<strong>互联网主干</strong>（由一群超大型，带宽超高路由器组成）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-3f8be06893441231.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网.jpg" title="">                </div>                <div class="image-caption">网.jpg</div>            </figure><h2 id="万维网-world-wide-web"><a class="markdownIt-Anchor" href="#万维网-world-wide-web"></a> 万维网 world wide web</h2><ul><li><p>互联网是传递数据的管道，传播最多数据的程序是万维网<br><strong>万维网的基本单位是页面</strong></p></li><li><p>页面有内容，有去往其他页面的链接–<strong>超链接</strong>，这些超链接形成巨大的互联网络<br>文字超链接–超文本（关联式索引）</p></li><li><p>为了使网页相互连接，每个网页需要一个唯一的地址–统一资源定位器 URL</p></li></ul><p><a href="http://xn--youtube-ri9ko68a3zbl11jdo3d4zpukhkm45l.com" target="_blank" rel="noopener">👉在浏览器里输入youtube.com</a>，浏览器就去问DNS服务器，得到他的IP地址（如果存在），然后浏览器会给这个IP地址发TCP请求，连接到这个IP，这个地址运行着“网络服务器”，网络服务器的标准端口是80端口，下一步是向服务器请求更进一步的页面（这里会用超文本传输协议HTTP：例如GET，还有状态码），例如向服务器发送指令“GET/courses”，服务器收到后会返回该地址对应的网页，然后浏览器会渲染到屏幕上。</p><p>👇超文本标记语言 HTML</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-3e6be56d854e7453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTML.png" title="">                </div>                <div class="image-caption">HTML.png</div>            </figure><p>网页浏览器可以和网页服务器沟通<br>浏览器获取网页和媒体，并负责显示<br>人工编辑目录–&gt;搜索引擎–&gt;搜索算法<br>网络中立性：所有的数据包平等，优先级相同</p><h2 id="计算机安全"><a class="markdownIt-Anchor" href="#计算机安全"></a> 计算机安全</h2><p>Secrety,Integrity,Availability<br>保密性，完整性，可用性</p><p>威胁模型分析：以能力水平区分</p><p>💡身份认证：</p><ul><li>你知道什么：用户名/密码–复杂组合（暴力攻击）</li><li>你有什么：用户有特定物品，如钥匙🔑和锁🔒</li><li>你是谁：生物识别–但有概率性，不能重设<br>建议“双因素”，“多因素”认证</li></ul><p>💡访问控制：通过权限或访问控制列表ACL来实现</p><ul><li>权限有：Read，Write，Execute</li><li>有很多种访问控制模型，例如：Chinese wall model，Biba model</li></ul><p>例如美国的模型：</p><ul><li>不能“读上”，读更高等级的内容</li><li>不能“写下”，改更低等级的文件（确保顶级机密不外泄）</li></ul><p>其他措施：安全大会，安全行业的来审计代码,安全型代码一般开源</p><h2 id="黑客与攻击"><a class="markdownIt-Anchor" href="#黑客与攻击"></a> 黑客与攻击</h2><ul><li><p>社会工程学：欺骗别人让别人泄露信息</p></li><li><p>配置别人的系统</p></li><li><p>网络钓鱼：邮件发送连接</p></li><li><p>假托：（电信诈骗）</p></li><li><p>邮件里带木马：恶意软件伪装成照片等</p></li><li><p>NAND镜像：暴力攻击被罚时时，增加几根线复制内存，罚时时覆盖内存继续尝试</p></li><li><p>漏洞利用：远程攻击需要攻击者利用系统漏洞来获得某些能力或访问权限</p><p>例如：缓冲区溢出：溢出部分改掉重要值，例如修改权限admin（应对方法：边界检查，随机存放变量在内存中的位置，金丝雀：缓冲区后面跟踪变化）</p></li><li><p>代码注入：攻击用数据库的网站</p><p>结构化查询语言SQL，一种流行的数据库API<br><img src="https://upload-images.jianshu.io/upload_images/20644861-d24ec3c699bedb8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SQL.png"></p><p>DROP TABLE users，删掉用户这张表。凉凉</p><p>应对：检测特殊字符…</p></li><li><p>蠕虫：恶意程序在电脑间互相传播，这些电脑组成僵尸网络</p></li><li><p>DDoS：僵尸网络里的所有电脑发一大堆垃圾信息，堵塞网络</p></li></ul><h2 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;人机交互&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;计算机网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机科学" scheme="http://Pluto-wei.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Crash Course Computer Science（part 1）</title>
    <link href="http://pluto-wei.github.io/2020/01/31/Crash-Course-Computer-science-%E7%AC%94%E8%AE%B0%201/"/>
    <id>http://pluto-wei.github.io/2020/01/31/Crash-Course-Computer-science-%E7%AC%94%E8%AE%B0%201/</id>
    <published>2020-01-31T03:53:23.000Z</published>
    <updated>2020-02-02T05:47:00.413Z</updated>
    
    <content type="html"><![CDATA[<p><strong>硬件Hardware</strong><br><strong>软件Software</strong></p><p><em><a id="more"></a></em></p><h1 id="硬件hardware"><a class="markdownIt-Anchor" href="#硬件hardware"></a> 硬件Hardware</h1><p>继电器，真空管，晶体管<br>二进制，布尔逻辑，基本操作：NOT AND OR，以及组成的 XOR 异或 （逻辑门）<br>算术存储单元ALU（算术单元和逻辑单元）<br>集成电路（都是晶体管组成的）</p><h2 id="锁存器"><a class="markdownIt-Anchor" href="#锁存器"></a> 锁存器</h2><p>（存储一个位）0 1</p><h2 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h2><ul><li>（一组锁存器） 8位寄存器 16 32 64<br>写入寄存器前要先启用里面所有的锁存器（允许写入线）</li><li>存大量寄存器：矩阵排列<br><strong>例如16×16网格的锁存器</strong><br>通过行列的某根线还可以确定到某个确定的锁存器来启动</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-c933cad517e63957.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="emm.png" title="">                </div>                <div class="image-caption">emm.png</div>            </figure><p>允许写入线，允许读取线，数据线 连接所有的锁存器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-599ac4cb2325c885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多路复用器.png" title="">                </div>                <div class="image-caption">多路复用器.png</div>            </figure><ul><li><p><strong>again 把256位内存作为一个整体</strong><br>（通过8位地址能储存256个数据？错，每一个位置上是一个0或者1，整体表示一个数据，有256个二进制数（也不是256种可能性，而是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>256</mn></msup></mrow><annotation encoding="application/x-tex">2^{256}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>））</p><p><img src="https://upload-images.jianshu.io/upload_images/20644861-09608d5675fc2437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="256位内存.png"></p></li><li><p>8位就是一个字节（这里都是单位，八位的字节包含8个二进制数）<br>一个字节有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>256</mn></msup></mrow><annotation encoding="application/x-tex">2^{256}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>种0和1的可能性</p></li><li><p><strong>把8个256位内存排一排</strong><br>存储8个数，给他们相同的地址<br>于是一个8位的地址可以存取一个8位数，<br>（这里好奇怪 无法理解：）</p></li></ul><blockquote><p>又把这个256位内存叫一位（可能是一位数字的意思？），把8个这样的内存排一排叫1字节？<br>为了存储这样的一个8位数，我们同时给8个256位内存一样的地址（如图）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/20644861-7e1efc4a48e425f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8位数字.png"></p><p>嗷，懂了，这样就能存储一个8位数了！地址是8位<br>Think about it :一位数相当于有256种可能性，$2<sup>{256</sup>8}=2<sup>{2</sup>{64}} $</p><h2 id="整体的可寻址内存"><a class="markdownIt-Anchor" href="#整体的可寻址内存"></a> 整体的可寻址内存</h2><ul><li><strong>RAM–随机存取存储器</strong><br>8位的地址<br>256个地址 每个地址可以读或写一个8位值（8 bits=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>种）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-b9d7795a2b02153d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RAM.png" title="">                </div>                <div class="image-caption">RAM.png</div>            </figure><ul><li>前四位是操作码（OPCODE：LOAD ADD）<br>后四位是内存地址（if is LOAD）</li></ul><h2 id="cpu中央处理器指令和程序"><a class="markdownIt-Anchor" href="#cpu中央处理器指令和程序"></a> CPU–中央处理器（指令和程序）</h2><ul><li>中央处理器（CPU，central processing unit）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</li><li>组成 <strong>ALU  控制单元  RAM  时钟</strong></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-e145987f4f2f5bc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CPU.png" title="">                </div>                <div class="image-caption">CPU.png</div>            </figure><ul><li><strong>取址–&gt;解码–&gt;执行</strong></li><li>可操作的指令有 LOAD ADD SUB JUMP HALT</li><li>英特尔集成4004，第一个集成CPU 有46条指令<br>现代CPU有上千个指令和指令变种，有各种巧妙复杂的电路<br>一秒十亿条指令</li></ul><h2 id="高级cpu设计"><a class="markdownIt-Anchor" href="#高级cpu设计"></a> 高级CPU设计</h2><ul><li><p>缓存</p><p>在RAM中取一整块存在CPU内部，方便数据的存取。<br>CPU与RAM中间只有一根数据线，效率较低<br>当数据有改变时，通过检测<strong>脏位</strong>，将数据同步给RAM</p></li><li><p>提高效率</p><p>并行处理，同时用上CPU中的取址，解码，执行</p></li><li><p><strong>高端处理器</strong></p><p>会猜测JUMP的下一步，进行推测执行</p></li><li><p><strong>超标量处理器</strong></p><p>一个时间周期完成多条指令</p><p><code>优化**一个指令流**的吞吐量</code><br>一个CPU中有多个ALU</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-eae2e80b8ab973f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CPU2.png" title="">                </div>                <div class="image-caption">CPU2.png</div>            </figure><ul><li><p><strong>多核处理器</strong></p><p>同时运行<strong>多个指令流</strong><br>一个CPU芯片中，有多个独立处理单元</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-854b2e98e87de910.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CPU3" title="">                </div>                <div class="image-caption">CPU3</div>            </figure><ul><li><p><strong>2个/4个CPU</strong><br>多核不够时可以用多个CPU</p></li><li><p><strong>超级计算机</strong><br>神威太湖之光有40960个CPU，每个CPU有256个核心，每个核心的频率是1.56GHz，每秒钟可以进行9.3亿亿次浮点运算</p></li></ul><h2 id="集成电路"><a class="markdownIt-Anchor" href="#集成电路"></a> 集成电路</h2><p>锗-&gt;硅</p><ul><li><strong>早期 IC 几个晶体管</strong>：把简单电路（逻辑门）封装成单独组件<br><strong>印刷电路板PCB</strong>：通过蚀刻金属线把零件连接在一起</li><li><strong>光刻</strong>：用光把复杂图案印在材料上，如半导体<br>用晶圆做基础，把复杂的金属电路放在上面集成所有东西–氧化层–光</li><li><strong>刻胶</strong>–光掩膜，金属化</li><li>光刻还可以制作电阻 电容<br>一片晶圆可以做很多 IC，整块做完后切割包进微型芯片<br>芯片的核心是 IC</li><li><strong>摩尔定律</strong>：每两年左右，材料和制造技术的发展，同样的空间大小，能塞进两倍数量的晶体管<br><strong>超大规模集成 VLSI 软件</strong>：用来自动生成芯片设计</li></ul><h1 id="软件software"><a class="markdownIt-Anchor" href="#软件software"></a> 软件Software</h1><h2 id="早期编程方式"><a class="markdownIt-Anchor" href="#早期编程方式"></a> 早期编程方式</h2><p>程序怎么进入内存？？</p><ul><li><p>一.纸卡</p><p><strong>最早的编程</strong>雅卡尔织布机<br>早期汇总机–不算计算机，只汇总数据（穿孔纸卡），不能编程</p></li><li><p>二.插线板</p><p><strong>Control panel 控制面板–插线板–&gt;可拔插</strong><br>有很多小插孔，可以插电线，让机器的不同部分可以相互传数据和信号<br>世界上第一台通用电子计算机ENIAC–用插线板编程</p><p><strong>存取程序计算机</strong><br>程序和数据都存在–冯诺伊曼结构<br>一个处理器（有算术逻辑单元），数据寄存器，指令寄存器，指令，内存（负责存数据和指令）</p></li><li><p>三.面板编程<br>大量使用开关</p></li></ul><h2 id="编程语言software"><a class="markdownIt-Anchor" href="#编程语言software"></a> 编程语言(Software)</h2><p>二进制是处理器的母语（机器语言，机器码）<br>对程序的高层次描述–<strong>伪代码</strong></p><ul><li><strong>汇编器</strong><br>读取汇编语言的写的程序。然后转成机器码<br>自己搞定跳转地址（插入可跳转标签）<br>一般一条机器指令对应一条机器指令</li><li><strong>编译器</strong><br>专门把高级语言转成低级语言(汇编或机器码)<br>一行高级编程语言，可能转成几十条二进制指令<br>程序员只需要创建变量–代表内存地址的抽象</li><li><strong>解释器</strong><br>运行时进行转换，而编译器是运行前转换</li></ul><h2 id="编程基础语句和函数"><a class="markdownIt-Anchor" href="#编程基础语句和函数"></a> 编程基础（语句和函数）</h2><ul><li>语法–规定句子结构的一系列规则<br>赋值语句，if语句，循环语句，把代码打包成函数（子程序）</li><li><strong>算法</strong>–解决问题的具体步骤<br>排序：选择排序<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，归并排序<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span><br>图搜索（找最佳路线）：Dijkstra算法</li><li><strong>算法的复杂度</strong>–算法的输入大小和运行步骤</li></ul><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><ul><li><code>数组</code>（列表，也叫向量）</li><li><code>字符串</code>（数组的亲戚）：字母 数字 标点符号</li><li><code>矩阵</code>（二维数组，数组的数组）</li><li><code>结构体</code>（多个变量打包，多个不同类型数据放在一起）</li><li><code>链表</code>（一个灵活的数据结构，能存很多个节点）：容易重新排序，插入，两端缩减，倒序<br>很多复杂的数据结构也用链表：队列和栈</li><li><code>队列</code>：先进先出</li><li><code>栈</code>：后进先出</li><li><code>树</code>（把一个节点的指针变成多个指针）：根节点，子节点，母/父节点（直属上层节点），叶节点（树结束的地方）<br>二叉树：节点最多只有两个子节点<br>甚至节点可以用链表来存储你所有的子节点<br>树的特点：根到叶是单向的</li><li><code>图</code>：数据随意连接，包括循环。用有多个节点的指针表示，可随意指向</li><li><code>红黑树和堆</code>？</li></ul><h2 id="计算机科学之父图灵"><a class="markdownIt-Anchor" href="#计算机科学之父图灵"></a> 计算机科学之父–图灵</h2><ul><li><code>图灵机</code>：规则，状态和纸带<br>停机问题 无法解决<br>提出智能，图灵测试（验证码）</li></ul><hr><h2 id="软件工程"><a class="markdownIt-Anchor" href="#软件工程"></a> 软件工程</h2><ul><li>把函数打包成层级，把相关代码都放在一起，打包成对象</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-1415b9e1715a2dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象.png" title="">                </div>                <div class="image-caption">对象.png</div>            </figure><ul><li>对象可以包含其他对象，函数 和变量</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-fc0f7bef9c874a0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象2.png" title="">                </div>                <div class="image-caption">对象2.png</div>            </figure><ul><li><p>把函数打包成对象的思想叫面向对象编程 Object Oriented Programming</p></li><li><p>文档 （帮助理解代码都做了什么）以及定义好的程序编程接口API<br>API 控制哪些函数和数据让外部访问，哪些仅供内部</p></li><li><p>面向对象的编程语言可以指定函数是private/public，隐藏复杂度，选择性的公布</p><hr></li><li><p>集成开发环境 IDE</p><p>debug 调试<br>写文档 README</p></li><li><p>源代码管理（版本控制）</p><p>把代码放在一个中心服务器上，叫做代码仓库<br><strong>Code repository</strong><br>check out，commit（提交）<br>master（代码的总版本）<br>质量保证测试 QA<br>β版本软件（快完成时向公众发布）免费的QA团队<br>alpha版本（只在公司内部测试）</p></li></ul><h2 id="操作系统os"><a class="markdownIt-Anchor" href="#操作系统os"></a> <strong>操作系统OS</strong></h2><ul><li>操作硬件的特殊权限，可以运行和管理其他程序 （1950年代）<br>操作系统充当硬件和软件之间的媒介<br>操作系统提供API来抽象硬件，叫设备驱动程序</li><li><strong>批处理</strong>（连续进行多个程序，自动加载程序）–&gt;在单个CPU上同时运行几个程序–&gt;<strong>多任务处理</strong>（给每个程序分配专属内存块，内存地址的虚拟化，内存保护）–&gt;分时操作系统（处理多个用户）</li><li><strong>Multics</strong>（功能太多）–&gt;<strong>Unix</strong>（把操作系统分为两个部分：内核（内存管理，多任务输入输出处理）和一堆有用的工具（例如程序和运行库），功能并不是很全面，内存崩溃时“恐慌”）–&gt;<strong>Windows</strong>（早期经常蓝屏）–&gt;<strong>Mac OS X,Linux,iOS,Android</strong></li><li>多任务，虚拟内存，内存保护</li></ul><h2 id="内存储存介质"><a class="markdownIt-Anchor" href="#内存储存介质"></a> 内存&amp;储存介质</h2><ul><li><p>存储介质</p><p><strong>打孔纸卡，打孔纸带</strong>–&gt;<strong>延迟线存储器</strong>（扬声器压力波/金属线的震动，顺序存储器/循环存储器）–&gt;<strong>磁芯存储器</strong>（可访问某一特定位置）–&gt;<strong>磁带</strong>–&gt;<strong>磁鼓</strong>储存器–&gt;<strong>硬盘</strong>（机械硬盘，固态硬盘SSD）–&gt;<strong>软盘</strong>–&gt;密度更高的软盘（Zip Disks）–&gt;<strong>光学存储器</strong>（光盘CD，DVD）光盘表面有很多小坑，造成光的不同反射，光学传感器捕获并解码为1和0</p></li></ul><h2 id="文件与文件系统"><a class="markdownIt-Anchor" href="#文件与文件系统"></a> 文件与文件系统</h2><ul><li><p>文件格式：</p><p>TXT（文本）WAVE（音频，振幅） Bitmap.bmp（图片，像素块：红绿蓝）<br>元数据（类型，图片宽度，图片高度，深度）+Date</p></li><li><p>怎么储存文件</p><p>为了存多个文件，需要一个特殊文件记录文件的位置（文件目录，通常在最开头）</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-b49c23d7d7f7a0c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件目录.png" title="">                </div>                <div class="image-caption">文件目录.png</div>            </figure><ul><li><p>文件系统专门负责管理文件</p></li><li><p>平面文件系统：</p><p>（文件都在同一个目录里）<br>分配块–增大或减小<br>碎片处理–把数据来回移动，排列成正确的数据</p></li><li><p>分层文件系统</p><p>目录文件不仅要指向文件，还要指向目录</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/20644861-2ef3de91bab67389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="根目录.png" title="">                </div>                <div class="image-caption">根目录.png</div>            </figure><h2 id="压缩-compression"><a class="markdownIt-Anchor" href="#压缩-compression"></a> 压缩 Compression</h2><p>把数据占用的空间压到更小<br>作用：高效储存图片，音乐，视频</p><ul><li><p>无损压缩</p><p><strong>消除冗余</strong> <strong>游程编码</strong>适合经常出现相同值的文件<br><strong>用更紧凑的表示方法</strong> <strong>字典编码</strong><br>GIF,PNG,PDF,ZIP</p></li><li><p>有损压缩</p><p><strong>感知编码</strong><br>用不同的精度编码不同的频段<br>例如<strong>声音</strong>，超声波/低音<br>FLAC / WAV --&gt; MP3<br>有损压缩文件格式<br>JPEG<br><strong>视频</strong>，每一帧，时间冗余，只存变化的部分，补丁的移动和转换<br>MPEG-4</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;硬件Hardware&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;软件Software&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="计算机科学" scheme="http://Pluto-wei.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://pluto-wei.github.io/2019/11/18/hello-world/"/>
    <id>http://pluto-wei.github.io/2019/11/18/hello-world/</id>
    <published>2019-11-17T16:28:39.391Z</published>
    <updated>2020-02-01T17:00:58.231Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><p><em><a id="more"></a></em></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#quick-start&quot;&gt;&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&quot;create-a-new-post&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#create-a-new-post&quot;&gt;&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
